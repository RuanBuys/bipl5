el.data.forEach(function (item, index, arr) {
if (arr[index].meta === 'predict') {
remove.push(index);
}
});
Plotly.deleteTraces('mydiv', remove);
}
selected = d.active;
var Activetraces = Array(data.num).fill().map((element, index) => index + data.num*active);
var NewActive = Array(data.num).fill().map((element, index) => index + data.num*selected);
if (selected === active){//basies hoef fokol te doen
return;
}
if (table2_visible === 1){
var update_traces = [];
el.data.forEach(function (item, index, arr) {
if (arr[index].meta[0] === 'PredTable') {
update_traces.push(index);
}
});
Plotly.deleteTraces('mydiv',update_traces)
Plotly.addTraces('mydiv',[pred12,pred13,pred23][selected])
}
var update = {
visible: false
};
var update2={
visible: true
}
Plotly.restyle('mydiv', update, Activetraces);
Plotly.restyle('mydiv', update2, NewActive);
active = selected;
dp_update = {
'xaxis.title' : data.DP[selected],
annotations : All_annot.slice(data.counts[active],data.counts[active+1])
}
myFunction(data.counts[active],data.counts[active+1])
Plotly.relayout('mydiv',dp_update)
return false;
})
//------------LEGENDCLICK--------------------
el.on('plotly_legendclick', function(dat){
var Activetraces = Array(data.num).fill().map((element, index) => index + data.num*active);
// Delete predictive lines
// NOTE: this must come first before rest otherwise error
if(dat.data[dat.curveNumber].meta=== 'predict'){
var remove = [];
el.data.forEach(function (item, index, arr) {
if (arr[index].meta === 'predict') {
remove.push(index);
}
});
//remove prediction lines annotations as well
for(let i = 0; i < data.a[active].length; i++){
el.layout.annotations.pop();
}
Plotly.deleteTraces('mydiv', remove);
return false;
}
if(dat.data[dat.curveNumber].meta[0] === 'data'){
return;
}
if(dat.data[dat.curveNumber].meta[0] === 'density'){
return;
}
if(dat.data[dat.curveNumber].meta === 'box'){
Plotly.deleteTraces('mydiv',dat.curveNumber)
bip_domain[0] = 0;
var update = {
'xaxis.domain': bip_domain,   // updates the xaxis range
'yaxis2.side': 'left'
};
Plotly.relayout('mydiv',update);
return false;
}
// REMOVE AXES
var axis = dat.data[dat.curveNumber].legendgroup;
var num = dat.data[dat.curveNumber].customdata[0];
var indeces =[];
el.data.slice(data.num*active,data.num*active+data.num).forEach(function(item,idx,arr){
if(arr[idx].legendgroup === undefined){
return;
}
if(arr[idx].legendgroup === axis){
indeces.push(idx);
}
if(arr[idx].customdata === undefined){
return;
}
if(arr[idx].customdata[0] === axis){
indeces.push(idx);
}
});
var old_annotations = el.layout.annotations;
if(active===0){
old_annotations.slice(data.counts[active],data.counts[active+1]).forEach(function(item,idx,arr){
if(arr[idx].customdata === num){
old_annotations[idx].visible = !old_annotations[idx].visible;
}
});
}else{
old_annotations.forEach(function(item,idx,arr){
if(arr[idx].customdata === num){
old_annotations[idx].visible = !old_annotations[idx].visible;
}
});
}
hidden = arr1[num-1];
var update = {'visible': ['legendonly',true][hidden]};
hidden = [1,0][hidden];
arr1[num-1] = hidden;
var new_annot = {annotations:old_annotations};
Plotly.restyle('mydiv',update,indeces.map((element, index) => element + data.num*active));
Plotly.relayout('mydiv',new_annot);
return false;
});
//-------------------POINTS CLICK--------------
el.on('plotly_click', function(d) {
if(d.points[0].meta === 'density'){
return;
}
//-------------BOXPLOT--------------------
if(d.points[0].meta === 'axis'){
if(hasbox){
var deleters = [];
//need to remove current boxplot
el.data.forEach(function (item, index, arr) {
if (arr[index].meta === 'box') {
deleters.push(index);
}
})
Plotly.deleteTraces('mydiv', deleters);
}
bip_domain[0] = 0.15;
var update = {
'xaxis.domain': bip_domain,   // updates the xaxis range
'yaxis2.side': 'left'
};
var trace1 = {
y: data.Xhat2[active][d.points[0].customdata-1],
type: 'box',
name: 'Boxplot: <br>'+data.colnames[d.points[0].customdata-1],
meta: 'box',
marker: {
color: 'rgb(7,40,89)'
},
jitter: 0.3,
pointpos: -1.8,
xaxis: 'x2',
yaxis: 'y2',
boxpoints: 'all'
};
Plotly.relayout('mydiv',update);
Plotly.addTraces('mydiv', trace1);
hasbox = true;
return;
}
//-----------------PREDICTION LINES--------------
if(clicked){
var remove = [];
el.data.forEach(function (item, index, arr) {
if (arr[index].meta === 'predict') {
remove.push(index);
}
});
Plotly.deleteTraces('mydiv', remove);
for(let i = 0; i < data.a[active].length; i++){
el.layout.annotations.pop();
}
}
var X = [];
var Y = [];
for (let i = 0; i < data.a[active].length; i++) {
var c = d.points[0].y+1/data.a[active][i].m*d.points[0].x;
var x_new = (data.a[active][i].c-c)/(-1/data.a[active][i].m-data.a[active][i].m);
var y_new = data.a[active][i].m*x_new+data.a[active][i].c;
var showleg = false;
if(i === 0){showleg = true;}
X.push(x_new);
Y.push(y_new);
var newtrace = {
x: [d.points[0].x, x_new],
y: [d.points[0].y, y_new],
mode: 'lines',
xaxis: 'x',
yaxis: 'y',
showlegend: showleg,
name: 'Predicted Value',
meta: 'predict',
line: {
dash: 'dot',
color: 'gray',
width: 1.5
}
};
var newAnnotation = {
x: x_new,
y: y_new,
text: data.Xhat[active][d.points[0].customdata-1][i].toFixed(2),
showarrow: false,
textangle: -Math.atan(data.a[active][i].m)*180/Math.PI,
xshift: -10*Math.sin(Math.atan(data.a[active][i].m)),
yshift: 10*Math.cos(Math.atan(data.a[active][i].m)),
name: 'Predicted Value',
meta: 'predict',
visible: true
}
el.layout.annotations.push(newAnnotation);
Plotly.addTraces('mydiv', newtrace);
}
clicked=true;
var markertrace = {
x: X,
y: Y,
mode: 'markers',
showlegend: false,
xaxis: 'x',
yaxis: 'y',
meta: 'predict',
marker: {
color:'gray'
}
}
Plotly.addTraces('mydiv', markertrace);
});
}
",data=list())
rm(make_biplot)
load_all()
make_biplot(x,TRUE)
load_all()
make_biplot(x,TRUE)
load_all()
make_biplot(x,TRUE)
load_all()
make_biplot(x,TRUE)
load_all()
make_biplot(x,TRUE)
load_all()
make_biplot(x,TRUE)
load_all()
make_biplot(x,TRUE)
load_all()
make_biplot(x,TRUE)
make_biplot(x,TRUE)
build()
make_biplot(x)
make_biplot(x)
make_biplot(x)
x<-PCAbiplot(iris[,-5],iris[,5])
make_biplot(x)
load_all()
??bpl5
??biplotzero
make_biplot(x)
?print.biplot
help(bpl5)
??declutter
?svd
?PCAbiplot
x<-PCAbiplot(iris[,1:4],group=iris[,5])
x$PCA
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
make_biplot(x)
load_all()
make_biplot(x)
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
x<-PCAbiplot(iris[,-5],group=iris[,5])
make_biplot(x)
x<-PCAbiplot(iris[,-5],group=iris[,5],scale=F)
make_biplot(x)
x<-PCAbiplot(iris[,-5],group=iris[,5])
make_biplot(x)
x$Z
library(UBbipl)
PCAbipl(iris[,-5])
rm(iris)
PCAbipl(iris[,-5],scaled.mat = T)
make_biplot(x)
a<-princomp(iris[,-5])
biplot(a)
a<-princomp(iris[,-5],scale=T)
?princomp
a<-princomp(iris[,-5],scale=T,cor=TRUE)
a<-princomp(iris[,-5],cor=TRUE)
biplot(a)
a<-princomp(iris[,-5])
biplot(a)
biplot(a)
a<-princomp(iris[,-5])
biplot(a)
a<-PCAbipl(iris[,-5],scaled.mat = T)
a<-princomp(iris[,-5],cor=T)
biplot(a)
a<-princomp(iris[,-5])
biplot(a)
?biplot
a<-PCAbipl(iris[,-5],scaled.mat = T)
a<-PCAbipl(iris[,-5])
a<-PCAbipl(iris[,-5],scaled.mat = T)
a$Z
a$Z[,1:2]-x$Z
b<-princomp(iris[,-5],cor=T)
biplot(b)
a
a<-PCAbipl(iris[,-5],scaled.mat = T)
biplot(b)
a<-PCAbipl(iris[,-5],scaled.mat = T)
biplot(b)
b<-princomp(iris[,-5],cor=F)
biplot(b)
x$scale
biplot.princomp
getAnywhere(biplot.princomp)
getAnywhere(biplot.default)
load_all()
make_biplot(x)
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
load_all()
make_biplot(x)
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
make_biplot(x)
load_all()
PCAbiplot(iris[,-5])
load_all()
PCAbiplot(iris[,-5])
load_all()
PCAbiplot(iris[,-5])
PCAbiplot(iris[,-5])
load_all()
PCAbiplot(iris[,-5])
load_all()
PCAbiplot(iris[,-5])
load_all()
PCAbiplot(iris[,-5])
load_all()
PCAbiplot(iris[,-5])
PCAbiplot(iris[,-5])
load_all()
PCAbiplot(iris[,-5])
load_all()
PCAbiplot(iris[,-5])
load_all()
PCAbiplot(iris[,-5])
PCAbiplot(iris[,-5])
PCAbiplot(iris[,-5])
PCAbiplot(iris[,-5],group=iris[,5])
load_all()
PCAbiplot(iris[,-5],group=iris[,5])
PCAbiplot(iris[,-5])
x$group
load_all()
PCAbiplot(iris[,-5])
ff<-PCAbiplot(iris[,-5])
ff$group
length(levels(ff$group))
load_all()
PCAbiplot(iris[,-5])
Ocotea.data
PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2])
PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2])
rm(list=ls())
PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2])
load_all()
PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2])
load_all()
PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2])
a<-PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2])
abs(max(a$Z))
Z[2,]
a$Z[2,]
load_all()
a<-PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2])
a
load_all()
load_all()
a<-PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2])
a
a<-PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2],color=c("red","green","blue"))
a
a<-PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2],color=c("red","green","blue"),symbol=c("circle","square","diamond"))
a
a<-PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2],color=c("red","green","blue"),symbol=c("circle","square","diamond"),basis=c(1,3))
a
load_all()
a
explode(a)
explode(a,dist=1)
load_all()
a<-PCAbiplot(Ocotea.data[,-c(1:2)],Ocotea.data[,2],color=c("red","green","blue"),symbol=c("circle","square","diamond"),basis=c(1,3))
a
document()
document()
check()
check()
check()
a
explode(a,dist=1)
load_all()
explode(a,dist=1)
check()
princomp
?princomp
a
svd
check()
document()
document()
load_all()
document()
check()
document()
load_all()
?TDA
x<-PCAbiplot(iris[,-5],group=iris[,5])
TDA(x,dist=1,inflate=1)
document()
?TDA
check()
check()
