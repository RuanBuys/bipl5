),
zmin=0,
zmax=0.104)
fig
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=col.use[1],
contours = list(
start = 0,
end = 0.104,
size = 0.002,
#coloring="heatmap",
showlabels=T
),
zmin=0,
zmax=0.104)
fig |> onRender("function(el){
console.log(el);
}")
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=col.use,
contours = list(
start = 0,
end = 0.104,
size = 0.002,
#coloring="heatmap",
showlabels=T
),
zmin=0,
zmax=0.104)
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale='col.use'Jet,
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale='Jet',
contours = list(
start = 0,
end = 0.104,
size = 0.002,
#coloring="heatmap",
showlabels=T
),
zmin=0,
zmax=0.104)
fig |> onRender("function(el){
console.log(el);
}")
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=clll,
contours = list(
start = 0,
end = 0.104,
size = 0.002,
#coloring="heatmap",
showlabels=T
),
zmin=0,
zmax=0.104)
fig |> onRender("function(el){
console.log(el);
}")
fig |> onRender("function(el){
console.log(el);
}")
for(i in 1:length(levels.rect)){
clll[[i]]<-list(levels.rect[i]/0.104,col.use[i])
}
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=clll,
contours = list(
start = 0,
end = 0.104,
size = 0.002,
#coloring="heatmap",
showlabels=T
),
zmin=0,
zmax=0.104)
fig |> onRender("function(el){
console.log(el);
}")
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=clll,
contours = list(
start = 0,
end = 0.104,
size = 0.002,
#coloring="heatmap",
showlabels=T
))
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=clll,
)
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=clll
)
fig |> onRender("function(el){
console.log(el);
}")
?seq
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use)
)
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0.01,1,length.out=52),col.use)
)
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0.002,1,length.out=52),col.use)
)
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use)
)
fig |> onRender("function(el){
console.log(el);
}")
list(seq(0,1,length.out=52),col.use)
levels.rect
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0,
end=0.104,
size=0.002
)
)
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
fig
fig
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)|>
add_trace(x=x$Z[,1],y=x$Z[,2],type="scatter")
fig |> onRender("function(el){
console.log(el);
}")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)|>
plot_ly(x=x$Z[,1],y=x$Z[,2],type="scatter")|>
add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)|>
plot_ly(data=x$Z,x=x$Z[,1],y=x$Z[,2],type="scatter")|>
add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
plot_ly(data=x$Z,x=x$Z[,1],y=x$Z[,2],type="scatter")
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)|>
plot_ly(data=x$Z, x=x$Z[,1],y=x$Z[,2],type="scatter")|>
add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
plot_ly(data=x$Z, x=x$Z[,1],y=x$Z[,2],type="scatter")
plot_ly(data=NULL, x=x$Z[,1],y=x$Z[,2],type="scatter")
x$Z
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)|>
plot_ly(data=as.data.frame(x$Z), x=x$Z[,1],y=x$Z[,2],type="scatter")|>
add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
fig <- plot_ly(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)|>
hh<- plot_ly(data=as.data.frame(x$Z), x=x$Z[,1],y=x$Z[,2],type="scatter")|>
add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
plot_ly(data=as.data.frame(x$Z), x=x$Z[,1],y=x$Z[,2],type="scatter")
hh<- plot_ly(data=as.data.frame(x$Z), x=x$Z[,1],y=x$Z[,2],type="scatter")
hh |> add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
hh
hh |> add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
hh
hh |> add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
x
class(x)
plot_bipl5(x)
plot_bipl5(x)->a
a |>   add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
)
)
a |>   add_trace(x=x$z.density$x,y=x$z.density$y,z = x$z.density$z, type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
),xaxis="x",yaxis="y"
)
a |>   add_trace(x=tx$z.density$x,y=x$z.density$y,z = t(x$z.density$z), type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
),xaxis="x",yaxis="y"
)
a |>   add_trace(x=x$z.density$x,y=x$z.density$y,z = t(x$z.density$z), type = "contour",
autocontour = F,
#autocolorscale=F,
colorscale=list(seq(0,1,length.out=52),col.use),
contours=list(
start=0.002,
end=0.104,
size=0.002
),xaxis="x",yaxis="y"
)
devtools::install_github("MuViSU/biplotEZ")
library(biplotEZ)
biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = "Symmetric") |>  samples(col=c("forestgreen","magenta"), pch=c(12,17), label.side=c("top","bottom")) |> legend.type(samples = TRUE) |> plot()
biplot.legend
biplotEZ:::biplot.legend
biplot(HairEyeColor[,,2], center = FALSE) |> CA(variant = "Symmetric") |>  samples(col=c("forestgreen","magenta"), pch=c(12,17), label.side=c("top","bottom")) |> legend.type(samples = TRUE) |> plot() -> bp
if (inherits(bp, "CA") & bp$legend$samples)
do.call(graphics::legend, c(list("topright", col = bp$samples$col[1:bp$g],
pch = bp$samples$pch[1:bp$g], legend = bp$g.names),
legend.addition))
legend.addition <- c(bp$legend.arglist)
if (inherits(bp, "CA") & bp$legend$samples)
do.call(graphics::legend, c(list("topright", col = bp$samples$col[1:bp$g],
pch = bp$samples$pch[1:bp$g], legend = bp$g.names),
legend.addition))
bp |> plot()
biplotEZ:::biplot.legend(bp)
all(c(F,F))
library(MASS)
?image
install.packages("biplotEZ")
install.packages("biplotEZ")
library(biplotEZ)
?PCO
biplot(iris[,1:4]) |> PCO(dist.func = sqrtManhattan) -> x
x
class(x)
plot(x)
biplotEZ::axes_coordinates(x)
axes_coordinates()
axes_coordinates
load_all()
library(devtools)
load_all()
?PCA
biplot(data = iris) |> PCA() |> plot_bipl5()
x<-biplot(data = iris) |> PCA() |> plot()
plot_bipl5(x)
x$Lmat
?CVA
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
load_all()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot_bipl5()
biplot(iris[,1:4]) |> CVA(classes=iris[,5]) |> plot()
?CVA
x<-biplot(data = iris) |> PCA() |> plot_bipl5()
x<-biplot(data = iris) |> PCA() |> plot()
x<-biplot(data = iris) |> PCA() |> plot_bipl5()
x$Vr
x$Lmat
fit.measures
load_all()
x<-biplot(data = iris) |> PCA() |> plot_bipl5()
load_all()
x<-biplot(data = iris) |> PCA() |> plot_bipl5()
load_all()
x<-biplot(data = iris) |> PCA() |> plot_bipl5()
x
load_all()
x
load_all()
x
x<-biplot(data = iris) |> PCA() |> plot_bipl5()
x
x
